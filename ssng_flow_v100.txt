[{"id":"72f20dc9.d73694","type":"comment","z":"8a013832.40f0d8","name":"2018.06.25 13:30","info":"- Check Data functionをまとめる\n- property mapのdecode\n- refactoring CSS, HTML\n- filter functionのdebug中\n- CLEAR DATA debug 済み\n- Filter機能実装済\n- Order機能実装済\n- Save Data bug fix\n- property map decode機能\n- refactoring","x":329.5,"y":33,"wires":[]},{"id":"1b858055.3be81","type":"function","z":"8a013832.40f0d8","name":"init","func":"// init.js\n// 2018.06.20\n\nglobal.set(\"epc_node\", {\n    0x80: [0x30],\n    0x82: [0x01, 0x0C, 0x01, 0x00],\n    0x83: [0xFE, 0x00, 0x00, 0x77, \n                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C],\n    0x8A: [0x00, 0x00, 0x77],\n    0x9D: [0x02, 0x80, 0xD5],\n    0x9E: [0x00],\n    0x9F: [0x0C, 0x80, 0x82, 0x83, 0x8A, 0x9D, 0x9E, 0x9F, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7],\n    0xD3: [0x01],\n    0xD4: [0x02],\n    0xD5: [0x01, 0x05, 0xFF, 0x01],\n    0xD6: [0x01, 0x05, 0xFF, 0x01],\n    0xD7: [0x01, 0x05, 0xFF]\n});\n\nglobal.set(\"epc_device\", {\n    0x80: [0x30],\n    0x81: [0x08],\n    0x82: [0x00, 0x00, 0x49, 0x00],\n    0x88: [0x42],\n    0x8A: [0x00, 0x00, 0x77],\n    0x9D: [0x03, 0x80, 0x81, 0x88],\n    0x9E: [0x00],\n    0x9F: [0x08, 0x80, 0x81, 0x82, 0x88, 0x8A, 0x9D, 0x9E, 0x9F],\n});\n\n// Send INF D5 to Node Profile\n  msg.els = {\n    \"ip\" : \"224.0.23.0\",\n    \"tid\" : 1,\n    \"seoj\" : [0x0ef0,1],\n    \"deoj\" : [0x05ff,1],\n    \"esv\" : 0x73,   // INF\n    \"epc\" : 0xD5,   // インスタンスリスト通知\n    \"edt\" : [0x01, 0x05, 0xFF, 0x01]    // Controller\n  };\n\nreturn msg;","outputs":1,"noerr":0,"x":351,"y":110,"wires":[["e732bc49.48b"]]},{"id":"bb87dc2.388c72","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"false","x":800,"y":110,"wires":[]},{"id":"6393631b.468ebc","type":"http response","z":"8a013832.40f0d8","name":"http response","statusCode":"","headers":{},"x":449.5,"y":215,"wires":[]},{"id":"45ef894e.b20fd8","type":"template","z":"8a013832.40f0d8","name":"ssng.html","field":"payload","fieldType":"msg","format":"html","syntax":"mustache","template":"<!-- SSNG/ssng6.html -->\n<!-- for Node_RED,  -->\n<!-- update 2018.06.25 13:30 -->\n\n<!doctype html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n    <title>SSNG</title>\n    <style>\n    * {\n      margin: 0; padding: 0;\n    }\n    html, body {\n        font-family: sans-serif;\n        /*width: 320px;*/\n         width: 100%;\n    }\n    main {\n      display: flex;\n      flex-direction: column;\n      padding: 10px;\n    }\n    section {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    h1 {\n      font-size: 1.4rem;\n      padding: 10px 0px 0px 10px;\n    }\n    h2 {\n      font-weight: normal;\n      font-size: 1.2rem;\n      padding: 0px 5px 0px 5px;\n    }\n    label {\n/*      padding: 10px 10px 0px 0px;*/\n    }\n    input {\n      font-weight: normal;\n      font-size: 1.2rem;\n      padding: 1px 0px 1px 5px;\n      color: red;\n    }\n    .mainFrame {\n      background: #ecf0f1;\n      box-shadow: 0 0 3px #aaa;\n      padding: 5px;\n    }\n    .statusArea {\n      font-weight: normal;\n      font-size: 1.2rem;\n      color: black;\n      padding: 0px 5px 0px 5px;\n    }\n    .scrollBox {\n      font-family: monospace;\n      font-weight: normal;\n      font-size: 1.2rem;\n      height: 400px;\n      color: black;\n      padding: 5px 5px 0px 5px;\n      overflow: scroll;\n    }\n    .radioButton {\n      margin: 0px 0px 5px 0px;\n    }\n    .inputFieldLabel {\n      font-size: 1.1rem;\n      padding: 0px 0px 0px 5px;\n    }\n    .radioButtonLabel {\n      margin: 0px 0px 0px 5px;\n    }\n    .checkBoxLabel {\n      padding: 0px 5px 0px 0px;\n    }\n    .button1 {\n      width: 100%;\n      height: 40px;\n      padding: 5px 10px 5px 10px;\n      margin: 0px 0px 0px 0px;\n      color: black;\n      font-size: 1rem;\n    }\n    .checkBoxArea {\n      box-shadow: 0 0 3px #aaa;\n      padding: 0px 5px 0px 7px;\n      margin: 0px 5px 0px 5px;\n    }\n    </style>\n</head>\n\n<body>\n<header>\n    <h1>SSNG</h1>\n</header>\n\n<main>\n  <div class=\"mainFrame\">\n    <h2>IP Address</h2>\n    <section>\n      <div>\n        <input type=\"text\" id=\"ipData\" value=224.0.23.0 onchange=\"checkInputValue('ip')\">\n      </div>\n      <div id=\"ipInputValue\" class=\"statusArea\"> </div>\n    </section>\n  </div>\n  \n  <div class=\"mainFrame\">\n    <input type=\"radio\" class=\"radioButton\" id=\"rb_el\" name=\"inputDataFormat\" checked=true onchange=\"radioButtonInputDataFormatIsSelected()\"> \n    <label for=\"rb_auto\" class=\"radioButtonLabel\">ECHONET Lite Data</label>\n    <section>\n      <div>\n        <input type=\"text\" id=\"deojData\" value=0x013001 onchange=\"checkInputValue('deoj')\">\n        <label class=\"inputFieldLabel\" for=\"deojData\">DEOJ</label>\n      </div>\n      <div id=\"deojInputValue\" class=\"statusArea\"> </div>\n    </section>\n    <section>\n      <div>\n        <input type=\"text\" id=\"esvData\" value=0x62 onchange=\"checkInputValue('esv')\">\n        <label class=\"inputFieldLabel\" for=\"esvData\">ESV</label>\n      </div>\n      <div id=\"esvInputValue\" class=\"statusArea\"> </div>\n    </section>\n    <section>\n      <div>\n        <input type=\"text\" id=\"epcData\" value=0x80 onchange=\"checkInputValue('epc')\">\n        <label class=\"inputFieldLabel\" for=\"epcData\">EPC</label>\n      </div>\n      <div id=\"epcInputValue\" class=\"statusArea\"> </div>\n    </section>\n    <section>\n      <div>\n        <input type=\"text\" id=\"edtData\" value=0x30 onchange=\"checkInputValue('edt')\">\n        <label class=\"inputFieldLabel\" for=\"edtData\">EDT</label>\n      </div>\n      <div id=\"edtInputValue\" class=\"statusArea\"> </div>\n    </section>\n  </div>\n  \n  <div class=\"mainFrame\">\n    <input type=\"radio\" class=\"radioButton\" id=\"rb_free\" name=\"inputDataFormat\" onchange=\"radioButtonInputDataFormatIsSelected()\"> \n    <label for=\"rb_free\" class=\"radioButtonLabel\">Free Data</label>\n    <section>\n      <div>\n        <input type=\"text\" id=\"freeData\" size=69 onchange=\"checkInputValue('free')\" value=10,81,00,0A,05,FF,01,01,30,01,62,01,80,00 >\n      </div>\n      <div id=\"freeInputValue\" class=\"statusArea\"> </div>\n    </section>\n  </div>\n  \n  <div class=\"mainFrame\">\n    <section>\n      <section>\n        <div>\n          <button class=\"button1\" id=\"buttonSend\" onclick=\"buttonClickSend()\">SEND</button>\n        </div>\n        <div>\n          <button class=\"button1\" id=\"buttonSearch\" onclick=\"buttonClickSearch()\">SEARCH</button>\n        </div>\n        <div>\n          <button class=\"button1\" id=\"buttonClearLog\" onclick=\"clearLog()\">CLEAR DATA</button>\n        </div>\n        <div>\n          <button class=\"button1\" id=\"buttonSaveLog\" onclick=\"saveLog()\">SAVE DATA</button>\n        </div>\n      </section>\n        <div id=\"sendData\" class=\"statusArea\"> </div>\n    </section>\n  </div>\n\n  <div class=\"mainFrame\">\n    <section>\n      <h2>DATA</h2>\n      <section>\n        <div class=\"checkBoxArea\">\n<!--\n          <input type=\"checkbox\" id=\"analyze\" onchange=\"displayLog()\">\n          <label class=\"checkBoxLabel\" for=\"analyze\">Analyze</label>\n-->\n          <input type=\"checkbox\" id=\"timeStamp\" onchange=\"displayLog()\">\n          <label class=\"checkBoxLabel\" for=\"timeStamp\">Time stamp</label>\n        </div>\n        <div class=\"checkBoxArea\">\n          <label class=\"checkBoxLabel\" for=\"normalOrder\">Order:</label>\n          <input type=\"radio\" id=\"normalOrder\" name=\"order\" checked onchange=\"displayLog()\">\n          <label class=\"checkBoxLabel\" for=\"normalOrder\">Norm</label>\n          <input type=\"radio\" id=\"reverseOrder\" name=\"order\" onchange=\"displayLog()\">\n          <label class=\"checkBoxLabel\" for=\"reverseOrder\">Rvs</label>\n        </div>\n        <div class=\"checkBoxArea\">\n          <label class=\"checkBoxLabel\" for=\"showGet\">Filter:</label>\n          <input type=\"checkbox\" id=\"showGet\" onchange=\"displayLog()\" checked>\n          <label class=\"checkBoxLabel\" for=\"showGet\">GET</label>\n          <input type=\"checkbox\" id=\"showInf\" onchange=\"displayLog()\" checked>\n          <label class=\"checkBoxLabel\" for=\"showInf\">INF</label>\n          <input type=\"checkbox\" id=\"showGetres\" onchange=\"displayLog()\" checked>\n          <label class=\"checkBoxLabel\" for=\"showGetres\">GET_RES</label>\n          <input type=\"checkbox\" id=\"showOthers\" onchange=\"displayLog()\" checked>\n          <label class=\"checkBoxLabel\" for=\"showOthers\">Others</label>\n        </div>\n      </section>\n    </section>\n      <div id=\"receivedData\" class=\"scrollBox\"> </div>\n  </div>\n</main>\n\n<script>\n  const serverURL = \"/ssng/\";\n  let tid = 0;\n  let dataLogArray = [];\n  let isNormalOrder = true;\n  \n  freeData.disabled = true;\n  document.getElementById(\"freeData\").style.color = \"grey\";\n  buttonSend.disabled = true;\n  buttonSearch.disabled = true;\n  buttonClearLog.disabled = true;\n  buttonSaveLog.disabled = true;\n  document.getElementById(\"buttonSend\").style.color = \"white\";\n  document.getElementById(\"buttonSearch\").style.color = \"white\";\n  document.getElementById(\"buttonClearLog\").style.color = \"white\";\n  document.getElementById(\"buttonSaveLog\").style.color = \"white\";\n  \n  // clear display data\n  clearData();\n  \n  // websocket:connect\n  const wsUri = \"ws://{{req.headers.host}}/ws/connect\";\n  let ws = new WebSocket(wsUri);\n  ws.onopen = function (event) {\n    let message = { binaryData: \"Connected\" };\n    ws.send(JSON.stringify(message));\n  };\n  \n  // websocket:receive\n  ws.onmessage = function(ev) {\n    let data = JSON.parse(ev.data);\n    if (data.connectionStatus !== undefined) {\n      sendData.innerHTML = data.connectionStatus;\n      if (data.connectionStatus == \"Connected\") {\n          buttonSend.disabled = false;\n          buttonSearch.disabled = false;\n          buttonClearLog.disabled = false;\n          buttonSaveLog.disabled = false;\n          document.getElementById(\"buttonSend\").style.color = \"black\";\n          document.getElementById(\"buttonSearch\").style.color = \"black\";\n          document.getElementById(\"buttonClearLog\").style.color = \"black\";\n          document.getElementById(\"buttonSaveLog\").style.color = \"black\";\n      }\n    }\n    if (data.uint8Array !== undefined) {\n      dataLogArray.push({timeStamp:timeStamp(), type:\"R\", ip:data.ip, data:data.uint8Array});\n      displayLog();\n    }\n  }\n\n  function displayLog() {\n//    const analyzeIsChecked = document.getElementById(\"analyze\").checked;\n    const timeStampIsChecked = document.getElementById(\"timeStamp\").checked;\n    const normalOrderIsChecked = document.getElementById(\"normalOrder\").checked;\n    const reverseOrderIsChecked = document.getElementById(\"reverseOrder\").checked;\n    const showGetIsChecked = document.getElementById(\"showGet\").checked;\n    const showInfIsChecked = document.getElementById(\"showInf\").checked;\n    const showGetresIsChecked = document.getElementById(\"showGetres\").checked;\n    const showOthersIsChecked = document.getElementById(\"showOthers\").checked;\n    let log = timeStampIsChecked ? \n        \"HH MM SS _ IP_____________ EHD_ TID_ SEOJ__ DEOJ__ ESV__ EPC__ EDT <br />\":\n        \"_ IP_____________ EHD_ TID_ SEOJ__ DEOJ__ ESV__ EPC__ EDT <br />\";\n    if (shouldToggleOrder()) {\n      isNormalOrder = !isNormalOrder;\n      dataLogArray.reverse();\n    }\n    for (let dataLog of dataLogArray) {\n      ts = timeStampIsChecked ? dataLog.timeStamp : \"\";\n      esv = dataLog.data[10];\n      if ((dataLog.type == \"S\") || filterEsv(esv)) {\n        log = log + ts + \" \" + dataLog.type + \" \" + ipFormat(dataLog.ip) + \" \" + elFormat(dataLog.data) + \"<br />\";\n        log = log + analyzeData(dataLog.data);\n      }\n    }\n    receivedData.innerHTML = log;\n    function shouldToggleOrder(){\n      return (((isNormalOrder) && reverseOrderIsChecked) ||\n              ((!isNormalOrder) && normalOrderIsChecked));\n    }\n    function filterEsv(esv) {\n      if (showGetIsChecked && (esv == 0x62)) {\n        return true;\n      }\n      if (showInfIsChecked && (esv == 0x73)) {\n        return true;\n      }\n      if (showGetresIsChecked && (esv == 0x72)) {\n        return true;\n      }\n      if (showOthersIsChecked && ((esv != 0x62) && (esv != 0x73) && (esv != 0x72))) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  function timeStamp() {\n    const date = new Date();\n    let hour = date.getHours().toString();\n    let minute = date.getMinutes().toString();\n    let second = date.getSeconds().toString();\n    hour = (hour.length == 1) ? (\"0\" + hour) : hour;\n    minute = (minute.length == 1) ? (\"0\" + minute) : minute;\n    second = (second.length == 1) ? (\"0\" + second) : second;\n    return hour + \":\" + minute + \":\" + second;\n  }\n\n  function analyzeData(uint8Array) {  // uint8Array: [UInt8]\n    let analyzedData = \"\";\n    let epcArray = [];\n    const esv = uint8Array[10];\n    const epc = uint8Array[12];\n    const edt = uint8Array.slice(14);\n\n    // Decode PropertyMap\n    if (shouldDecodePropertyMap()) {\n      if (edt.length < 17) {  // PropertyMapがEPCの列挙の場合\n        for (let i=1; i<edt.length; i++) {\n          epcArray.push(toStringHex(edt[i], 1));\n        }\n      } else {    // PropertyMapがbitmapの場合\n        for (let i = 1; i<17; i++) {\n          for (let j = 0; j<8; j++) {\n            if ((edt[i] & (1 << j)) !==0 ) {\n              let epc = 0x80 + (0x10 * j) + i-1;\n                epcArray.push(toStringHex(epc, 1));\n            }             \n          }\n        }\n      }\n      epcArray.sort();\n      analyzedData = \"> EPC:\";\n      for (let data of epcArray) {\n        analyzedData += \" \" + data;\n      }\n      analyzedData += \"<br />\";\n    }\n    return analyzedData;  // analyzedData: string\n    \n    function shouldDecodePropertyMap() {\n      return ((esv == 0x72)&&((epc == 0x9D)||(epc == 0x9E)||(epc == 0x9F)));\n    }\n  }\n\n  function radioButtonInputDataFormatIsSelected() {\n//    const rb_elIsChecked = document.querySelector('#rb_el').checked;\n    const rb_elIsChecked = document.getElementById(\"rb_el\").checked;\n    if (rb_elIsChecked === true) {\n      deojData.disabled = false;\n      esvData.disabled = false;\n      epcData.disabled = false;\n      edtData.disabled = false;\n      freeData.disabled = true;\n      document.getElementById(\"deojData\").style.color = \"red\";\n      document.getElementById(\"esvData\").style.color = \"red\";\n      document.getElementById(\"epcData\").style.color = \"red\";\n      document.getElementById(\"edtData\").style.color = \"red\";\n      document.getElementById(\"freeData\").style.color = \"grey\";\n    } else {\n      deojData.disabled = true;\n      esvData.disabled = true;\n      epcData.disabled = true;\n      edtData.disabled = true;\n      freeData.disabled = false;\n      document.getElementById(\"deojData\").style.color = \"grey\";\n      document.getElementById(\"esvData\").style.color = \"grey\";\n      document.getElementById(\"epcData\").style.color = \"grey\";\n      document.getElementById(\"edtData\").style.color = \"grey\";\n      document.getElementById(\"freeData\").style.color = \"red\";\n    }    \n  }\n    \n  function elFormat(uint8Array) {\n    let elString = \"\";\n    for (let value of uint8Array) {\n      elString += toStringHex(value, 1);\n    }\n    elString = strIns(elString, 4, \" \");\n    elString = strIns(elString, 9, \" \");\n    elString = strIns(elString, 16, \" \");\n    elString = strIns(elString, 23, \" \");\n    elString = strIns(elString, 26, \" \");\n    elString = strIns(elString, 29, \" \");\n    elString = strIns(elString, 32, \" \");\n    elString = strIns(elString, 35, \" \");\n    return elString;\n  }\n\n  // Allign the length of ip address\n  function ipFormat(ip) { // ip:string\n    let ipString = ip;\n    for (let i = 0; i < (15 - ip.length); i++) {\n      ipString += \"_\";\n    }\n    return ipString;  // ipString:string\n  }\n\n  // 数値(number)を16進数表記の文字列に変換する\n  // 数値のbyte数は(bytes)\n  // example: toStringHex(10, 1) => \"0A\"\n  // example: toStringHex(10, 2) => \"000A\"\n  function toStringHex(number, bytes) {\n      let str = number.toString(16).toUpperCase();\n      while (str.length < 2*bytes) { str = \"0\" + str; }\n          return str;\n  }\n\n  // stringに文字列を挿入\n  function strIns(str, idx, val){ // str:string（元の文字列）, idx:number（挿入する位置）, val:string（挿入する文字列）\n    var res = str.slice(0, idx) + val + str.slice(idx);\n    return res;\n  }\n\n  // Check input value\n  function checkInputValue(inputType) { // inputType:string \"ip\", \"deoj\", \"esv\", \"epc\", \"edt\", \"free\"\n    let regex;\n    let testResultDisplay = document.getElementById(inputType + \"InputValue\");\n    const inputValue = document.getElementById(inputType + \"Data\").value;\n    switch (inputType) {\n      case \"ip\":\n        regex = /^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n        break;\n      case \"deoj\":\n        regex = /^(0x)?(\\d|[a-f]|[A-F]){6}$/;\n        break;\n      case \"esv\":\n      case \"epc\":\n        regex = /^(0x)?(\\d|[a-f]|[A-F]){2}$/;\n        break;\n      case \"edt\":\n        regex = /^((0x)?((\\d|[a-f]|[A-F]){2}){1,})?$/;\n        break;\n      case \"free\":\n        regex = /^((\\d|[a-f]|[A-F]){2},\\s*){1,}(\\d|[a-f]|[A-F]){2}\\s*$/;\n        break;\n      default:\n    }\n    if (regex.test(inputValue)) {\n      testResultDisplay.innerHTML = \"OK\";\n      return true;\n    }else{\n      testResultDisplay.innerHTML = \"Check Data\";\n      return false;\n    }\n  }\n\n  function buttonClickSend() {\n    if (!checkInputValue('ip')) {\n      sendData.innerHTML = \"Check Data\";\n      return;\n    }\n    let uint8Array = [];\n    let binaryString = \"\";\n\n//    const rb_elIsChecked = document.querySelector('#rb_el').checked;\n    const rb_elIsChecked = document.getElementById(\"rb_el\").checked;\n    uint8Array = rb_elIsChecked ? createUint8ArrayFromElData() : createUint8ArrayFromFreeData();\n\n    if (uint8Array !== false) {\n      sendData.innerHTML = \"OK!\";\n\n      const message = {ip:ipData.value, uint8Array:uint8Array};\n      const request = new XMLHttpRequest();\n      request.open('PUT', serverURL + 'send');\n      request.setRequestHeader(\"Content-type\", \"application/json\");\n      request.send(JSON.stringify(message));\n\n      // push \"Sent Data\"\n      dataLogArray.push({timeStamp:timeStamp(), type:\"S\", ip:ipData.value, data:uint8Array});\n    } else {\n      sendData.innerHTML = \"Check Data\";\n    }\n  }\n\n  function createUint8ArrayFromElData() {\n    if (checkInputValue('deoj')&&checkInputValue('esv')&&checkInputValue('epc')&&checkInputValue('edt')) {\n      sendData.innerHTML = \"OK!\";\n      let uint8Array = [0x10, 0x81];  // EHD\n      tid = (tid == 0xFFFF) ? 0 : (tid+1);\n      uint8Array.push(Math.floor(tid/16), tid%16);  // TID\n      uint8Array.push(0x05, 0xFF, 0x01);  // SEOJ\n      for (let data of hex2Array(deojData.value)) { // DEOJ\n        uint8Array.push(data);      \n      }\n      uint8Array.push(parseInt(esvData.value, 16));  // ESV\n      uint8Array.push(0x01);  // OPC\n      uint8Array.push(parseInt(epcData.value, 16));  // EPC\n      const esv = parseInt(esvData.value, 16);\n      if ((esv == 0x62) || \n          (esv == 0x63) || \n          (esv == 0x71) || \n          (esv == 0x7A) || \n          (esv == 0x7E) || \n          (esv == 0x50) || \n          (esv == 0x51) || \n          (esv == 0x52) || \n          (esv == 0x53) || \n          (esv == 0x5E)) {\n        uint8Array.push(0x00);  // PDC\n      } else {  // EPC= 0x60:SetI, 0x61:SetC, 0x6E:SetGet, 0x72:Get_Res, 0x73:INF, 0x74:INFC, \n        const edtArray = hex2Array(edtData.value)\n        uint8Array.push(edtArray.length);  // PDC\n        for (let data of hex2Array(edtData.value)) {  // EDT\n          uint8Array.push(data);\n        }\n      }\n      return uint8Array;\n    } else {\n      return false;      \n    }\n  }\n\n  function hex2Array(hex) { // hex: string of this format 0xXXXX or XXXX\n    if (hex.slice(0,2) != \"0x\") {\n      hex = \"0x\" + hex;\n    }\n    let array =[];\n    const bytes = (hex.length - 2)/2;\n    for (let i=0; i<bytes; i++) {\n      array.push(parseInt(hex.slice((i+1)*2,(i+1)*2+2), 16));\n    }\n    return array; // array: array of byte data\n  }\n  \n  function createUint8ArrayFromFreeData() {\n    if (checkInputValue('free')) {\n      let uint8Array = [];\n      let arrayFromFreeData = freeData.value.split(\",\");\n      for (let value of arrayFromFreeData) {\n        uint8Array.push(parseInt(value.trim(), 16));\n      }\n      return uint8Array;\n    } else {\n      return false;      \n    }\n  }\n  \n  function buttonClickSearch() {\n//    let uint8Array =[];\n    ipData.value = \"224.0.23.0\";\n    deojData.value = \"0x0EF001\";\n    esvData.value = \"0x62\";\n    epcData.value = \"0xD6\";\n    edtData.value = \"\";\n    freeData.value=\"10,81,00,04,05,FF,01,0E,F0,01,62,01,D6,00\";\n    buttonClickSend();\n  }\n\n  function saveLog() {\n    let log = \"\";\n    for (let dataLog of dataLogArray) {\n      log = log + dataLog.timeStamp + \" \" + dataLog.type + \" \" + ipFormat(dataLog.ip) + \" \" + elFormat(dataLog.data) + \"\\n\";\n    }\n    const message = {log:log};\n    const request = new XMLHttpRequest();\n    request.open('POST', serverURL + 'saveLog');\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    request.send(JSON.stringify(message));\n  }\n\n  function clearData() {\n    sendData.innerHTML = \"\";\n    ipInputValue.innerHTML = \"\";\n    deojInputValue.innerHTML = \"\";\n    esvInputValue.innerHTML = \"\";  \n    epcInputValue.innerHTML = \"\";\n    edtInputValue.innerHTML = \"\";\n    receivedData.innerHTML = \"\";\n  }\n\n  function clearLog() {\n    dataLogArray.length = 0;\n    receivedData.innerHTML = \"\";\n  }\n  \n</script>\n</body>\n</html>","x":219.5,"y":214,"wires":[["6393631b.468ebc"]]},{"id":"3d98db15.7ec284","type":"inject","z":"8a013832.40f0d8","name":"Search","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":105.36363220214844,"y":3499,"wires":[["8f53a0d6.7eeef"]]},{"id":"8f53a0d6.7eeef","type":"function","z":"8a013832.40f0d8","name":"Search","func":"//  msg.els.ip_string   // ip address (String)\n//  msg.els.tid         // TID (Int)\n//  msg.els.seoj        // SEOJ ([Int:device, Int:instance])\n//  msg.els.deoj        // DEOJ ([Int:device, Int:instance])\n//  msg.els.esv         // ESV (Int)\n//  msg.els.epc         // EPC (Int)\n//  msg.els.edt_int     // EDT ([Int])\n\nmsg.els = {\n    \"ip\" : \"224.0.23.0\",\n    \"tid\" : 5,\n    \"seoj\" : [0x05ff,1],\n    \"deoj\" : [0x0ef0,1],\n    \"esv\" : 0x62,\n    \"epc\" : 0xD6\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":294.36363220214844,"y":3508,"wires":[[]]},{"id":"6e57c1c5.0d556","type":"http in","z":"8a013832.40f0d8","name":"","url":"/ssng","method":"get","upload":false,"swaggerDoc":"","x":65,"y":216,"wires":[["45ef894e.b20fd8"]]},{"id":"f986d44b.febdb8","type":"http in","z":"8a013832.40f0d8","name":"","url":"/ssng/send","method":"put","upload":false,"swaggerDoc":"","x":86,"y":283,"wires":[["6393631b.468ebc","b40dbcdb.c824c","a95be961.29c7b8"]]},{"id":"1adf4ed8.889fc1","type":"udp out","z":"8a013832.40f0d8","name":"EL send","addr":"","iface":"","port":"3610","ipv":"udp4","outport":"","base64":false,"multicast":"false","x":765,"y":284,"wires":[]},{"id":"b40dbcdb.c824c","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"payload","x":306.5,"y":332,"wires":[]},{"id":"6d2d8b9c.3a3294","type":"udp in","z":"8a013832.40f0d8","name":"","iface":"","port":"3610","ipv":"udp4","multicast":"true","group":"224.0.23.0","datatype":"buffer","x":105.5,"y":493,"wires":[["3032ecec.8e6624","8babaf6b.3ab0e","e0d6ac24.49d4"]]},{"id":"3032ecec.8e6624","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"payload","x":313,"y":505,"wires":[]},{"id":"8babaf6b.3ab0e","type":"function","z":"8a013832.40f0d8","name":"buffer2UInt8Array","func":"// Buffer2UInt8Array.js\n// 2018.06.11\n\nconst buffer = msg.payload;\nlet dataArray =[];\n\nfor (let i = 0; i < buffer.length; i++) {\n    dataArray.push(buffer.readUInt8(i));\n}\n\nmsg.payload = dataArray;\nreturn msg;","outputs":1,"noerr":0,"x":328,"y":463,"wires":[["f878960c.ed7118","13b9be07.d514a2"]]},{"id":"f878960c.ed7118","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"false","x":542.5,"y":464,"wires":[]},{"id":"9bfeb36a.b8503","type":"websocket in","z":"8a013832.40f0d8","name":"websocket:connect","server":"309252b4.92953e","client":"","x":111.5,"y":564,"wires":[["ef8e942e.905798","42294b0b.db6924"]]},{"id":"df840081.0a695","type":"websocket out","z":"8a013832.40f0d8","name":"websocket:send","server":"309252b4.92953e","client":"","x":841.5,"y":565,"wires":[]},{"id":"ef8e942e.905798","type":"function","z":"8a013832.40f0d8","name":"manageSessionId","func":"// manageSessionId.js\n// 2018.05.22\n\nconsole.log(msg._session);\nglobal.set(\"session_id\", msg._session);\n\nmsg.payload = {\"connectionStatus\":\"Connected\"};\nreturn msg;","outputs":1,"noerr":0,"x":567,"y":565,"wires":[["df840081.0a695","1e87fdfd.7132e2"]]},{"id":"13b9be07.d514a2","type":"function","z":"8a013832.40f0d8","name":"pushMessage","func":"// pushMessage.js\n// 2018.06.11\n\n// Set websocket session id from Global variable\nmsg._session = global.get(\"session_id\");\n\nconst ip = msg.ip;\nconst uint8Array = msg.payload;\nmsg.payload = {\"ip\":ip, \"uint8Array\":uint8Array};\nreturn msg;","outputs":1,"noerr":0,"x":555,"y":510,"wires":[["df840081.0a695"]]},{"id":"1e87fdfd.7132e2","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"false","x":782.5,"y":631,"wires":[]},{"id":"42294b0b.db6924","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"_session","x":402.5,"y":632,"wires":[]},{"id":"5bf8fa7a.5b3874","type":"comment","z":"8a013832.40f0d8","name":"ssng6","info":"","x":55.5,"y":33,"wires":[]},{"id":"a95be961.29c7b8","type":"function","z":"8a013832.40f0d8","name":"unit8Array2buffer","func":"// unit8Array2buffer.js\n// 2018.06.12\n\nconst ip = msg.payload.ip;\nconst data = msg.payload.uint8Array;\n\nmsg.ip = ip;\nmsg.payload = Buffer.from(data);\nreturn msg;","outputs":1,"noerr":0,"x":440,"y":285,"wires":[["1adf4ed8.889fc1","62359ea.e97936"]]},{"id":"62359ea.e97936","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"false","x":732,"y":331,"wires":[]},{"id":"954dd191.e97d5","type":"http in","z":"8a013832.40f0d8","name":"","url":"/ssng/saveLog","method":"post","upload":false,"swaggerDoc":"","x":124,"y":760,"wires":[["edaaa14b.7650b"]]},{"id":"edaaa14b.7650b","type":"function","z":"8a013832.40f0d8","name":"saveLog","func":"// saveLog.js\n// 2018.06.24\n\nconst log = msg.payload.log;\nconst date = new Date();\n\nconst year = date.getFullYear();\nconst month = date.getMonth()+1;\nconst day = date.getDate();\nconst hour = date.getHours();\nconst minute = date.getMinutes();\nconst second = date.getSeconds();\nfilename = \"ssngLog_\" + year + month + day + hour + minute + second  + \".txt\";\n\nmsg.filename = filename;\nmsg.payload = log;\nreturn msg;","outputs":1,"noerr":0,"x":380,"y":762,"wires":[["b4c518ae.8ab7e8","f637245f.b11d18","5453d59d.37c36c"]]},{"id":"b4c518ae.8ab7e8","type":"file","z":"8a013832.40f0d8","name":"","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":619,"y":762,"wires":[]},{"id":"f637245f.b11d18","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"filename","x":631,"y":814,"wires":[]},{"id":"763d185d.504ed8","type":"link in","z":"8a013832.40f0d8","name":"http response","links":["5453d59d.37c36c"],"x":343,"y":168,"wires":[["6393631b.468ebc"]]},{"id":"5453d59d.37c36c","type":"link out","z":"8a013832.40f0d8","name":"saveLog","links":["763d185d.504ed8"],"x":495,"y":714,"wires":[]},{"id":"17549082.f08fbf","type":"inject","z":"8a013832.40f0d8","name":"Initialize","topic":"","payload":"Initialize","payloadType":"str","repeat":"","crontab":"","once":true,"x":89.5,"y":110,"wires":[["1b858055.3be81"]]},{"id":"e732bc49.48b","type":"function","z":"8a013832.40f0d8","name":"Send EL1","func":"// Send ECHONET Lite packet\n// Assumption: OPC = 1\n//\n//  Usage: set following data\n//  msg.els.ip      ip address (String)\n//  msg.els.tid     TID (Int)\n//  msg.els.seoj    SEOJ ([Int:device, Int:instance])\n//  msg.els.deoj    DEOJ ([Int:device, Int:instance])\n//  msg.els.esv     ESV (Int)\n//  msg.els.epc     EPC (Int)\n//  msg.els.edt     EDT ([Int]) or []\n\nif (msg.els === null) {\n    console.log(\"msg.els === null\");\n    return;\n}\n\nconst tid_buffer = Buffer.allocUnsafe(2);\nlet   seoj_buffer = Buffer.allocUnsafe(3);\nconst seoj = msg.els.seoj;\nlet   deoj_buffer = Buffer.allocUnsafe(3);\nconst deoj = msg.els.deoj;\nconst esv_buffer = Buffer.allocUnsafe(1);\nconst opc_buffer = Buffer.from([1]);\nconst epc_buffer = Buffer.allocUnsafe(1);\nconst pdc_buffer = Buffer.allocUnsafe(1);\nlet edt = msg.els.edt;\n\ntid_buffer.writeUInt16BE(msg.els.tid, 0);\nesv_buffer.writeUInt8(msg.els.esv, 0);\nepc_buffer.writeUInt8(msg.els.epc, 0);\n\nseoj_buffer.writeUInt16BE(seoj[0], 0);\nseoj_buffer.writeUInt8(seoj[1], 2);\ndeoj_buffer.writeUInt16BE(deoj[0], 0);\ndeoj_buffer.writeUInt8(deoj[1], 2);\n\n// edt[]からedt_bufferを作成\nif ((typeof edt) == \"undefined\") {\n    edt = [];\n}\n\nconst edt_buffer = Buffer.allocUnsafe(edt.length);\nfor (var i = 0; i < edt.length; i++) {\n    edt_buffer.writeUInt8(edt[i], i);\n}\n\npdc_buffer.writeUInt8(edt_buffer.length, 0);\n\n// Create ECHONET Lite packet\nconst el_buffer = Buffer.from([\n\t0x10, 0x81,\n\ttid_buffer[0], tid_buffer[1],\n\tseoj_buffer[0], seoj_buffer[1], seoj_buffer[2],\n\tdeoj_buffer[0], deoj_buffer[1], deoj_buffer[2],\n\tesv_buffer[0], opc_buffer[0], epc_buffer[0], pdc_buffer[0]]);\n\n// add EDT data\nif (edt_buffer.length !== 0) {\n    msg.payload = Buffer.concat([el_buffer, edt_buffer], \n        (el_buffer.length + edt_buffer.length));\n} else {\n    msg.payload = el_buffer;\n}\n\nmsg.ip = msg.els.ip;\nreturn msg;","outputs":1,"noerr":0,"x":627.5,"y":111,"wires":[["1adf4ed8.889fc1","bb87dc2.388c72"]]},{"id":"e0d6ac24.49d4","type":"function","z":"8a013832.40f0d8","name":"Parse EL1","func":"// Parse ECHONET Lite packet\n// Assumption: OPC = 1\n\n//  OUTPUT:\n//  msg.elr.ip      // ip address (String)\n//  msg.elr.ehd     // EHD (Int)\n//  msg.elr.tid     // TID (Int)\n//  msg.elr.seoj    // SEOJ ([Int:device, Int:instance])\n//  msg.elr.deoj    // DEOJ ([Int:device, Int:instance])\n//  msg.elr.esv     // ESV (Int)\n//  msg.elr.opc     // OPC (Int)\n//  msg.elr.epc     // EPC (Int)\n//  msg.elr.pdc     // PDC (Int)\n//  msg.elr.edt     // EDT ([Int]) or [](no EDT data)\n\nconst buffer = msg.payload;\n\nif (buffer.length >= 14) {\n  const ehd_buffer = buffer.slice(0, 2);\n  const tid_buffer = buffer.slice(2, 4);\n  const seoj_device_buffer = buffer.slice(4, 6);\n  const seoj_instance_buffer = buffer.slice(6, 7);\n  const deoj_device_buffer = buffer.slice(7, 9);\n  const deoj_instance_buffer = buffer.slice(9, 10);\n  const esv_buffer = buffer.slice(10, 11);\n  const opc_buffer = buffer.slice(11, 12);\n  const epc_buffer = buffer.slice(12, 13);\n  const pdc_buffer = buffer.slice(13, 14);\n\n  const ehd = ehd_buffer.readUInt16BE(0);\n  const tid = tid_buffer.readUInt16BE(0);\n  const seoj_device = seoj_device_buffer.readUInt16BE(0);\n  const seoj_instance = seoj_instance_buffer.readUInt8(0);\n  const seoj = [seoj_device, seoj_instance];\n  const deoj_device = deoj_device_buffer.readUInt16BE(0);\n  const deoj_instance = deoj_instance_buffer.readUInt8(0);\n  const deoj = [deoj_device, deoj_instance];\n  const esv = esv_buffer.readUInt8(0);\n  const opc = opc_buffer.readUInt8(0);\n  const epc = epc_buffer.readUInt8(0);\n  const pdc = pdc_buffer.readUInt8(0);\n  let edt = [];\n  \n  if (buffer.length >= 15) {\n    const edt_buffer = buffer.slice(14);\n    for (var i = 0; i < edt_buffer.length; i++) {\n        edt[i] = edt_buffer.readUInt8(i);\n    }\n  }\n\n  // ECHONET Lite header check\n  if (ehd == 0x1081) {\n    msg.elr = {\n        \"ip\"    : msg.ip,\n        \"ehd\"   : ehd,\n        \"tid\"   : tid,\n        \"seoj\"  : seoj,\n        \"deoj\"  : deoj,\n        \"esv\"   : esv,\n        \"opc\"   : opc,\n        \"epc\"   : epc,\n        \"pdc\"   : pdc,\n        \"edt\"   : edt\n    };\n  } else {\n      return;\n  }\n} else {\n    return;\n}\n\n// from integer to HEX string in even digit\nfunction n2HexString(n){\n    let str = n.toString(16);\n    if ((str.length % 2) === 0) {\n        str = \"0x\" + str;\n    } else {\n        str = \"0x0\" + str;\n    }\n    return str;\n}\n\nlet edtTmp = [];\nfor (let edt of msg.elr.edt) {\n    edtTmp.push(n2HexString(edt));\n}\n\n//  display in HEX format\nmsg.payload = {\n    ip : msg.elr.ip,\n    ehd : n2HexString(msg.elr.ehd),\n    tid : n2HexString(msg.elr.tid),\n    seoj : n2HexString(msg.elr.seoj[0]) + \", \" + n2HexString(msg.elr.seoj[1]),\n    deoj : n2HexString(msg.elr.deoj[0]) + \", \" + n2HexString(msg.elr.deoj[1]),\n    esv : n2HexString(msg.elr.esv),\n    opc : n2HexString(msg.elr.opc),\n    epc : n2HexString(msg.elr.epc),\n    pdc : n2HexString(msg.elr.pdc),\n    edt : edtTmp\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":305.5,"y":415,"wires":[["edd06817.041038"]]},{"id":"edd06817.041038","type":"function","z":"8a013832.40f0d8","name":"Get","func":"// get.js\n// 2018.06.20\n\n// Node-RED/HueEL3V/generalLightingGet.js  2017.05.23\n// Process Get(0x62) for device object\n\nlet epcs;\nlet els = {};\nels.ip = msg.elr.ip;\nels.tid = msg.elr.tid;\nels.seoj = msg.elr.deoj;\nels.deoj = msg.elr.seoj;\nels.epc = msg.elr.epc;\n\nif ((msg.elr.deoj[0] == 0x05FF) && (msg.elr.esv == 0x62)) {  // controller and get\n    epcs =  global.get(\"epc_device\");\n}\nelse if ((msg.elr.deoj[0] == 0x0EF0) && (msg.elr.esv == 0x62)) {  // node and get\n    epcs = global.get(\"epc_node\");\n}\nelse {\n    return;\n}\n\nconst edt = epcs[msg.elr.epc];\nif (edt !== undefined) {  // reply GET_RES\n    els.esv = 0x72;\n    els.edt = edt;\n} else {               // reply Get_SNA\n    els.esv = 0x52;\n    els.edt = [];\n}\n\nmsg.els = els;\nreturn msg;","outputs":1,"noerr":0,"x":478,"y":415,"wires":[["e732bc49.48b","ee4e8dc1.df1ca"]]},{"id":"ee4e8dc1.df1ca","type":"debug","z":"8a013832.40f0d8","name":"","active":false,"console":"false","complete":"false","x":628,"y":414,"wires":[]},{"id":"309252b4.92953e","type":"websocket-listener","z":"","path":"/ws/connect","wholemsg":"false"}]